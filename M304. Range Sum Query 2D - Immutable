class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.matrix = matrix
        self.prefix_m = matrix
        for i in range(len(matrix)):
            for j in range(1, len(matrix[0])):
                self.prefix_m[i][j]+=self.prefix_m[i][j-1]

    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        res = 0
        i = row1
        while i<=row2:
            if col1>0:
                res += self.prefix_m[i][col2] - self.prefix_m[i][col1-1]
            else:
                res += self.prefix_m[i][col2]
            i += 1
        
        # if (row1==row2 and col1==col2):
        #     print("ikkada", self.matrix[row1][col1],self.matrix)
        #     return self.matrix[row1][col1]
        # for i in range(row1, row2+1):
        #     res += self.prefix_m[i][col2] - self.prefix_m[i][col1-1]
        #     # sum(self.matrix[i][col1:col2+1])
        return res
        
                

#
# Runtime: 7368 ms, faster than 5.00% of Python3 online submissions for Range Sum Query 2D - Immutable.
# Memory Usage: 25.1 MB, less than 40.31% of Python3 online submissions for Range Sum Query 2D - Immutable.
# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
